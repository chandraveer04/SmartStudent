/**
 * Student Data Access Object (DAO)
 * 
 * Handles all database operations related to student entities.
 * This class provides CRUD (Create, Read, Update, Delete) operations
 * and search functionality for student records.
 * 
 * Features:
 * - Complete CRUD operations for student management
 * - Advanced search functionality (by name, roll number, department, marks)
 * - Top performers retrieval
 * - Department statistics
 * - Data validation and error handling
 * 
 * @author Smart Student Management System
 * @version 1.0
 * @since 2025
 */
package com.smartstudent.dao;

import com.smartstudent.model.Student;
import com.smartstudent.util.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDAO {
    
    /**
     * Inserts a new student record into the database
     * 
     * This method creates a new student record with all the provided information.
     * The student ID is auto-generated by the database.
     * 
     * @param student Student object containing all student information
     * @throws SQLException if database error occurs during insertion
     */
    public void insertStudent(Student student) throws SQLException {
        String sql = "INSERT INTO students (name, roll_no, department, email, phone, marks) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, student.getName());
            stmt.setString(2, student.getRollNo());
            stmt.setString(3, student.getDepartment());
            stmt.setString(4, student.getEmail());
            stmt.setString(5, student.getPhone());
            stmt.setDouble(6, student.getMarks());
            stmt.executeUpdate();
        }
    }

    /**
     * Retrieves all students from the database
     * 
     * Returns a list of all student records ordered by name.
     * This method is used for displaying the complete student list.
     * 
     * @return List of all student records
     * @throws SQLException if database error occurs during retrieval
     */
    public List<Student> getAllStudents() throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students ORDER BY name";
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                list.add(createStudentFromResultSet(rs));
            }
        }
        return list;
    }

    /**
     * Retrieves a specific student by roll number
     * 
     * Searches for a student with the exact roll number provided.
     * Returns null if no student is found with the given roll number.
     * 
     * @param rollNo Roll number to search for
     * @return Student object if found, null otherwise
     * @throws SQLException if database error occurs during search
     */
    public Student getStudentByRollNo(String rollNo) throws SQLException {
        String sql = "SELECT * FROM students WHERE roll_no = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, rollNo);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return createStudentFromResultSet(rs);
                }
            }
        }
        return null;
    }

    /**
     * Updates an existing student record
     * 
     * Updates all fields of a student record identified by roll number.
     * The roll number itself cannot be changed as it's used as the identifier.
     * 
     * @param rollNo Roll number of the student to update
     * @param updated Updated student object with new information
     * @throws SQLException if database error occurs during update
     */
    public void updateStudent(String rollNo, Student updated) throws SQLException {
        String sql = "UPDATE students SET name=?, department=?, email=?, phone=?, marks=? WHERE roll_no=?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, updated.getName());
            stmt.setString(2, updated.getDepartment());
            stmt.setString(3, updated.getEmail());
            stmt.setString(4, updated.getPhone());
            stmt.setDouble(5, updated.getMarks());
            stmt.setString(6, rollNo);
            stmt.executeUpdate();
        }
    }

    /**
     * Deletes a student record from the database
     * 
     * Removes a student record identified by roll number.
     * This operation is permanent and cannot be undone.
     * 
     * @param rollNo Roll number of the student to delete
     * @throws SQLException if database error occurs during deletion
     */
    public void deleteStudent(String rollNo) throws SQLException {
        String sql = "DELETE FROM students WHERE roll_no=?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, rollNo);
            stmt.executeUpdate();
        }
    }

    /**
     * Searches for students by department
     * 
     * Performs a partial match search on department names.
     * Returns all students whose department contains the search term.
     * 
     * @param department Department name to search for (partial match)
     * @return List of students in the specified department
     * @throws SQLException if database error occurs during search
     */
    public List<Student> searchByDepartment(String department) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students WHERE department LIKE ? ORDER BY name";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, "%" + department + "%");
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    list.add(createStudentFromResultSet(rs));
                }
            }
        }
        return list;
    }

    /**
     * Searches for students by name
     * 
     * Performs a partial match search on student names.
     * Returns all students whose name contains the search term.
     * 
     * @param name Student name to search for (partial match)
     * @return List of students matching the name criteria
     * @throws SQLException if database error occurs during search
     */
    public List<Student> searchByName(String name) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students WHERE name LIKE ? ORDER BY name";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, "%" + name + "%");
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    list.add(createStudentFromResultSet(rs));
                }
            }
        }
        return list;
    }

    /**
     * Searches for students by roll number
     * 
     * Performs a partial match search on roll numbers.
     * Returns all students whose roll number contains the search term.
     * 
     * @param rollNo Roll number to search for (partial match)
     * @return List of students matching the roll number criteria
     * @throws SQLException if database error occurs during search
     */
    public List<Student> searchByRollNo(String rollNo) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students WHERE roll_no LIKE ? ORDER BY roll_no";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, "%" + rollNo + "%");
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    list.add(createStudentFromResultSet(rs));
                }
            }
        }
        return list;
    }

    /**
     * Searches for students within a marks range
     * 
     * Returns all students whose marks fall within the specified range (inclusive).
     * Results are ordered by marks in descending order (highest first).
     * 
     * @param minMarks Minimum marks in the range
     * @param maxMarks Maximum marks in the range
     * @return List of students within the marks range
     * @throws SQLException if database error occurs during search
     */
    public List<Student> searchByMarksRange(double minMarks, double maxMarks) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students WHERE marks BETWEEN ? AND ? ORDER BY marks DESC";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, minMarks);
            stmt.setDouble(2, maxMarks);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    list.add(createStudentFromResultSet(rs));
                }
            }
        }
        return list;
    }

    /**
     * Retrieves top performing students
     * 
     * Returns the specified number of students with the highest marks,
     * ordered by marks in descending order.
     * 
     * @param limit Maximum number of students to return
     * @return List of top performing students
     * @throws SQLException if database error occurs during retrieval
     */
    public List<Student> getTopPerformers(int limit) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM students ORDER BY marks DESC LIMIT ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, limit);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    list.add(createStudentFromResultSet(rs));
                }
            }
        }
        return list;
    }

    /**
     * Retrieves all unique departments
     * 
     * Returns a list of all department names that exist in the database,
     * ordered alphabetically. Used for populating department dropdowns.
     * 
     * @return List of unique department names
     * @throws SQLException if database error occurs during retrieval
     */
    public List<String> getAllDepartments() throws SQLException {
        List<String> departments = new ArrayList<>();
        String sql = "SELECT DISTINCT department FROM students ORDER BY department";
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                departments.add(rs.getString("department"));
            }
        }
        return departments;
    }

    /**
     * Checks if a roll number already exists
     * 
     * Verifies whether a student with the given roll number already exists
     * in the database. Used for validation before inserting new students.
     * 
     * @param rollNo Roll number to check
     * @return true if roll number exists, false otherwise
     * @throws SQLException if database error occurs during check
     */
    public boolean isRollNoExists(String rollNo) throws SQLException {
        String sql = "SELECT COUNT(*) FROM students WHERE roll_no = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, rollNo);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }

    /**
     * Creates a Student object from database result set
     * 
     * Helper method that maps database row data to a Student object.
     * Handles all field mapping and timestamp conversion.
     * 
     * @param rs ResultSet containing student data
     * @return Student object populated with database data
     * @throws SQLException if error occurs while reading result set
     */
    private Student createStudentFromResultSet(ResultSet rs) throws SQLException {
        Student student = new Student(
            rs.getInt("id"),
            rs.getString("name"),
            rs.getString("roll_no"),
            rs.getString("department"),
            rs.getString("email"),
            rs.getString("phone"),
            rs.getDouble("marks")
        );
        
        // Set timestamps if available (for newer database schemas)
        try {
            Timestamp createdAt = rs.getTimestamp("created_at");
            if (createdAt != null) {
                student.setCreatedAt(createdAt.toLocalDateTime());
            }
            
            Timestamp updatedAt = rs.getTimestamp("updated_at");
            if (updatedAt != null) {
                student.setUpdatedAt(updatedAt.toLocalDateTime());
            }
        } catch (SQLException e) {
            // Timestamp columns might not exist in older database schema
            // This is handled gracefully without throwing an error
        }
        
        return student;
    }
} 