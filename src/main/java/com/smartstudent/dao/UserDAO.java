/**
 * User Data Access Object (DAO)
 * 
 * Handles all database operations related to user authentication and management.
 * This class provides user authentication, creation, and management functionality
 * for the Smart Student Management System.
 * 
 * Features:
 * - User authentication and validation
 * - User account creation and management
 * - Role-based access control support
 * - User existence validation
 * - Secure password handling
 * 
 * @author Smart Student Management System
 * @version 1.0
 * @since 2025
 */
package com.smartstudent.dao;

import com.smartstudent.model.User;
import com.smartstudent.util.DatabaseConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDAO {
    
    /**
     * Authenticates a user with the provided credentials
     * 
     * Validates username and password against the database.
     * Returns a User object if authentication is successful,
     * null otherwise.
     * 
     * @param username User's login username
     * @param password User's login password
     * @return User object if authentication successful, null otherwise
     * @throws SQLException if database error occurs during authentication
     */
    public User authenticateUser(String username, String password) throws SQLException {
        String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, password);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return createUserFromResultSet(rs);
                }
            }
        }
        return null;
    }
    
    /**
     * Creates a new user account in the database
     * 
     * Inserts a new user record with the provided information.
     * The user ID is auto-generated by the database.
     * 
     * @param user User object containing account information
     * @return true if user creation successful, false otherwise
     * @throws SQLException if database error occurs during creation
     */
    public boolean createUser(User user) throws SQLException {
        String sql = "INSERT INTO users (username, password, role) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getPassword());
            stmt.setString(3, user.getRole());
            return stmt.executeUpdate() > 0;
        }
    }
    
    /**
     * Retrieves all users from the database
     * 
     * Returns a list of all user accounts ordered by username.
     * This method is typically used for administrative purposes.
     * 
     * @return List of all user accounts
     * @throws SQLException if database error occurs during retrieval
     */
    public List<User> getAllUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        String sql = "SELECT * FROM users ORDER BY username";
        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                users.add(createUserFromResultSet(rs));
            }
        }
        return users;
    }
    
    /**
     * Updates an existing user account
     * 
     * Updates the password and role of an existing user account.
     * The username cannot be changed as it's used as the identifier.
     * 
     * @param user User object with updated information
     * @return true if update successful, false otherwise
     * @throws SQLException if database error occurs during update
     */
    public boolean updateUser(User user) throws SQLException {
        String sql = "UPDATE users SET password = ?, role = ? WHERE username = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getPassword());
            stmt.setString(2, user.getRole());
            stmt.setString(3, user.getUsername());
            return stmt.executeUpdate() > 0;
        }
    }
    
    /**
     * Deletes a user account from the database
     * 
     * Removes a user account identified by username.
     * This operation is permanent and cannot be undone.
     * 
     * @param username Username of the account to delete
     * @return true if deletion successful, false otherwise
     * @throws SQLException if database error occurs during deletion
     */
    public boolean deleteUser(String username) throws SQLException {
        String sql = "DELETE FROM users WHERE username = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            return stmt.executeUpdate() > 0;
        }
    }
    
    /**
     * Checks if a username already exists
     * 
     * Verifies whether a user account with the given username already exists
     * in the database. Used for validation before creating new accounts.
     * 
     * @param username Username to check
     * @return true if username exists, false otherwise
     * @throws SQLException if database error occurs during check
     */
    public boolean isUsernameExists(String username) throws SQLException {
        String sql = "SELECT COUNT(*) FROM users WHERE username = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        }
        return false;
    }
    
    /**
     * Creates a User object from database result set
     * 
     * Helper method that maps database row data to a User object.
     * Handles all field mapping and timestamp conversion.
     * 
     * @param rs ResultSet containing user data
     * @return User object populated with database data
     * @throws SQLException if error occurs while reading result set
     */
    private User createUserFromResultSet(ResultSet rs) throws SQLException {
        User user = new User(
            rs.getInt("id"),
            rs.getString("username"),
            rs.getString("password"),
            rs.getString("role")
        );
        
        // Set timestamp if available (for newer database schemas)
        try {
            Timestamp createdAt = rs.getTimestamp("created_at");
            if (createdAt != null) {
                user.setCreatedAt(createdAt.toLocalDateTime());
            }
        } catch (SQLException e) {
            // Timestamp column might not exist in older database schema
            // This is handled gracefully without throwing an error
        }
        
        return user;
    }
} 